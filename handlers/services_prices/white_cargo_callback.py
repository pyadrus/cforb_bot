import os

from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InputMediaPhoto
from aiogram.types import Message
from loguru import logger

from keyboards.user_keyboards.user_keyboards import create_services_and_prices_main_menu_keyboard
from states.states import EditWhiteCargoDeliveryState
from system.dispatcher import ADMIN_USER_ID
from system.dispatcher import bot, dp
from system.dispatcher import router
from system.working_with_files import load_bot_info
from system.working_with_files import save_bot_info


@router.message(Command("white_cargo_gte_photo"))
async def cmd_replace_white_cargo_photo(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_USER_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ jpg")


@router.message(F.photo)
async def handle_photo_upload(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo = message.photo[-1]
    file_info = await message.bot.get_file(photo.file_id)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    await message.bot.download_file(file_info.file_path, os.path.join("media/photos/", 'white_cargo_gte.jpg'))
    await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!")


@router.callback_query(F.data == "white_cargo_gte")
async def handle_white_cargo_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """üìå –ö–Ω–æ–ø–∫–∞ ‚Äú–ë–µ–ª–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–∑–æ–≤ —Å –ì–¢–î ‚Äù"""
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await bot.edit_message_media(
            media=InputMediaPhoto(
                media=FSInputFile('media/photos/white_cargo_gte.jpg'),
                caption=load_bot_info(messages="media/messages/services_prices_messages/white_cargo_gte.json"),
                parse_mode="HTML"
            ),
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=create_services_and_prices_main_menu_keyboard(),
        )
    except Exception as error:
        logger.exception(error)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_white_cargo_gte (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.message(Command("edit_white_cargo_gte"))
async def cmd_edit_white_cargo_text(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ë–µ–ª–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–∑–æ–≤ —Å –ì–¢–î"""
    if message.from_user.id not in ADMIN_USER_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É HTML.")
    await state.set_state(EditWhiteCargoDeliveryState.edit_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
@router.message(EditWhiteCargoDeliveryState.edit_text)
async def update_white_cargo_info(message: Message, state: FSMContext):
    save_bot_info(message.html_text, file_path='media/messages/services_prices_messages/white_cargo_gte.json')
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()


def register_handle_white_cargo_callback():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.message.register(handle_white_cargo_callback)
    dp.message.register(cmd_edit_white_cargo_text)
    dp.message.register(update_white_cargo_info)
    dp.message.register(cmd_replace_white_cargo_photo)
