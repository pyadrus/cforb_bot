import json

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InputMediaPhoto
from loguru import logger

from keyboards.user_keyboards.user_keyboards import create_packaging_keyboard, create_packaging_menu_keyboard
from system.dispatcher import bot, dp
from system.dispatcher import router


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_bot_info():
    with open("media/messages/types_of_packaging.json", 'r', encoding='utf-8') as json_file:
        data = json.load(json_file)
    return data


@router.callback_query(F.data == "types_of_packaging")
async def types_of_packaging(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–∏–¥—ã —É–ø–∞–∫–æ–≤–∫–∏"""
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        data = load_bot_info()
        document = FSInputFile('media/photos/types_of_packaging.jpg')
        types_of_packaging_key = create_packaging_keyboard()
        media = InputMediaPhoto(media=document, caption=data)
        await bot.edit_message_media(media=media,
                                     chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id,
                                     reply_markup=types_of_packaging_key
                                     )
    except Exception as error:
        logger.exception(error)


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_bot_infos():
    with open("media/messages/bag_tape.json", 'r', encoding='utf-8') as json_file:
        data = json.load(json_file)
    return data


@router.callback_query(F.data == "bag_tape")
async def bag_tape(callback_query: types.CallbackQuery, state: FSMContext):
    """–ú–µ—à–æ–∫ + —Å–∫–æ—Ç—á"""
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        types_of_packaging_key = create_packaging_menu_keyboard()
        document = FSInputFile('media/photos/types_of_packaging.jpg')
        data = load_bot_infos()
        media = InputMediaPhoto(media=document, caption=data)
        await bot.edit_message_media(media=media,
                                     chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id,
                                     reply_markup=types_of_packaging_key
                                     )
    except Exception as error:
        logger.exception(error)


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_bot_infoss():
    with open("media/messages/box_bag_tape.json", 'r', encoding='utf-8') as json_file:
        data = json.load(json_file)
    return data


@router.callback_query(F.data == "box_bag_tape")
async def box_bag_tape(callback_query: types.CallbackQuery, state: FSMContext):
    """–ö–æ—Ä–æ–±–∫–∞ + –º–µ—à–æ–∫ + —Å–∫–æ—Ç—á"""
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        types_of_packaging_key = create_packaging_menu_keyboard()
        document = FSInputFile('media/photos/types_of_packaging.jpg')
        data = load_bot_infoss()
        media = InputMediaPhoto(media=document, caption=data)
        await bot.edit_message_media(media=media,
                                     chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id,
                                     reply_markup=types_of_packaging_key
                                     )
    except Exception as error:
        logger.exception(error)


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_bot_infosss():
    with open("media/messages/wooden_sheathing_bag_tape.json", 'r', encoding='utf-8') as json_file:
        data = json.load(json_file)
    return data


@router.callback_query(F.data == "wooden_sheathing_bag_tape")
async def wooden_sheathing_bag_tape(callback_query: types.CallbackQuery, state: FSMContext):
    """–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –æ–±—Ä–µ—à–µ—Ç–∫–∞ + –º–µ—à–æ–∫ + —Å–∫–æ—Ç—á"""
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        types_of_packaging_key = create_packaging_menu_keyboard()
        document = FSInputFile('media/photos/types_of_packaging.jpg')
        data = load_bot_infosss()
        media = InputMediaPhoto(media=document, caption=data)
        await bot.edit_message_media(media=media,
                                     chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id,
                                     reply_markup=types_of_packaging_key
                                     )
    except Exception as error:
        logger.exception(error)


@router.callback_query(F.data == "wooden_corners_bag_tape")
async def wooden_corners_bag_tape(callback_query: types.CallbackQuery, state: FSMContext):
    """–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ —É–≥–æ–ª–∫–∏ + –º–µ—à–æ–∫ + —Å–∫–æ—Ç—á"""
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        greeting_message = (f'<a href="https://youtube.com/shorts/QcXqjaESW7s">–£–≥–æ–ª–∫–∏ + –º–µ—à–æ–∫ + —Å–∫–æ—Ç—á:</a> –õ–µ–≥—á–µ —á–µ–º '
                            f'–æ–±—Ä–µ—à–µ—Ç–∫–∞, –¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É –∫–æ—Ä–æ–±–∫–∏, –Ω–æ –º–µ–Ω–µ–µ –∑–∞—â–∏—â–µ–Ω–Ω–∞—è, —Ç.–∫ '
                            f'–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫—Ä—ã—Ç–∞—è.\n\n'
                            f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏ 10$ –º–µ—Å—Ç–æ</b>\n\n'
                            f'<b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏: @cargo_cfb</b>\n\n')
        types_of_packaging_key = create_packaging_menu_keyboard()
        await bot.send_message(callback_query.from_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                               text=greeting_message,  # –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
                               reply_markup=types_of_packaging_key,
                               )  # –¢–µ–∫—Å—Ç –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
    except Exception as error:
        logger.exception(error)


@router.callback_query(F.data == "pallet_in_crate")
async def pallet_in_crate(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–∞–ª–ª–µ—Ç –≤ –æ–±—Ä–µ—à–µ—Ç–∫–µ"""
    try:
        # await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        # await state.reset_state()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        greeting_message = (f'<a href="https://www.youtube.com/shorts/Z2awci-nCNk">–ü–∞–ª–ª–µ—Ç –≤ –æ–±—Ä–µ—à–µ—Ç–∫–µ:</a> '
                            f'–í–∏–¥ —É–ø–∞–∫–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã—Ö –∏–ª–∏ —Ö—Ä—É–ø–∫–∏—Ö –≥—Ä—É–∑–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è '
                            f'–ø–æ–¥–¥–æ–Ω —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ –±–æ—Ä—Ç–∞–º–∏ –∫–∞–∫ —É –æ–±—Ä–µ—à–µ—Ç–∫–∏. –ü–æ–≥—Ä—É–∑–æ—á–Ω–æ-—Ä–∞–∑–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã '
                            f'—Ç–æ–≤–∞—Ä–æ–≤, —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –≤–∏–ª–æ—á–Ω–æ–≥–æ –ø–æ–≥—Ä—É–∑—á–∏–∫–∞.\n\n'
                            f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏ 45$ –∑–∞ –∫—É–±</b>\n\n'
                            f'<b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏: @cargo_cfb</b>')
        types_of_packaging_key = create_packaging_menu_keyboard()
        await bot.send_message(callback_query.from_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                               text=greeting_message,  # –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
                               reply_markup=types_of_packaging_key,
                               # parse_mode=types.ParseMode.HTML
                               )  # –¢–µ–∫—Å—Ç –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
    except Exception as error:
        logger.exception(error)


@router.callback_query(F.data == "pallet_with_a_solid_wooden_box")
async def pallet_with_a_solid_wooden_box(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–∞–ª–ª–µ—Ç —Å –≥–ª—É—Ö–∏–º –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º –∫–æ—Ä–æ–±–æ–º"""
    try:
        # await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        # await state.reset_state()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        greeting_message = (f"<b>–ü–∞–ª–ª–µ—Ç —Å –≥–ª—É—Ö–∏–º –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º –∫–æ—Ä–æ–±–æ–º:</b> –í–∏–¥ —É–ø–∞–∫–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã—Ö"
                            f" –∏–ª–∏ —Ö—Ä—É–ø–∫–∏—Ö –≥—Ä—É–∑–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –ø–æ–¥–¥–æ–Ω —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ –±–æ—Ä—Ç–∞–º–∏ –∫–∞–∫ —É –æ–±—Ä–µ—à–µ—Ç–∫–∏. "
                            f"–ü–æ–≥—Ä—É–∑–æ—á–Ω–æ-—Ä–∞–∑–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤, —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ "
                            f"–ø–æ–º–æ—â–∏ –≤–∏–ª–æ—á–Ω–æ–≥–æ –ø–æ–≥—Ä—É–∑—á–∏–∫–∞.\n\n"

                            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏ 90-100$ –∑–∞ –∫—É–±</b>\n\n"

                            f"<b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏: @cargo_cfb</b>\n\n")
        types_of_packaging_key = create_packaging_menu_keyboard()
        await bot.send_message(callback_query.from_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                               text=greeting_message,  # –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
                               reply_markup=types_of_packaging_key,
                               )  # –¢–µ–∫—Å—Ç –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
    except Exception as error:
        logger.exception(error)


def register_types_of_packaging_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.message.register(types_of_packaging)
    dp.message.register(bag_tape)
    dp.message.register(box_bag_tape)
    dp.message.register(wooden_sheathing_bag_tape)
    dp.message.register(wooden_corners_bag_tape)
    dp.message.register(pallet_in_crate)
    dp.message.register(pallet_with_a_solid_wooden_box)
