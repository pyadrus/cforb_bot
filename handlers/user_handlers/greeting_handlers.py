import os
from datetime import datetime

from aiogram import types, F
from aiogram.filters import Command
from aiogram.filters import CommandStart
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InputMediaPhoto
from aiogram.types import Message
from loguru import logger

from database.database import check_user_exists_in_db
from database.database import get_user_data_from_db
from database.database import insert_user_data_to_database
from database.database import recording_data_of_users_who_launched_the_bot
from database.database import update_city_in_db
from database.database import update_name_in_db
from database.database import update_phone_in_db
from database.database import update_surname_in_db
from keyboards.user_keyboards.user_keyboards import create_contact_keyboard
from keyboards.user_keyboards.user_keyboards import create_data_modification_keyboard
from keyboards.user_keyboards.user_keyboards import create_greeting_keyboard
from keyboards.user_keyboards.user_keyboards import create_my_details_keyboard
from keyboards.user_keyboards.user_keyboards import create_sign_up_keyboard
from states.states import FormeditMainMenu, ChangingData, MakingAnOrder
from system.dispatcher import ADMIN_USER_ID
from system.dispatcher import bot, dp
from system.dispatcher import router
from system.working_with_files import load_bot_info
from system.working_with_files import save_bot_info


@router.message(Command("greeting_photo"))
async def greeting_photo(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_USER_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ jpg")


@router.message(F.photo)
async def replace_photo(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo = message.photo[-1]
    file_info = await message.bot.get_file(photo.file_id)
    new_photo_path = os.path.join("media/photos/", 'greeting.jpg')
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    await message.bot.download_file(file_info.file_path, new_photo_path)
    await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!")


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    user_last_name = message.from_user.last_name
    user_date = message.date.strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"{user_id} {user_name} {user_first_name} {user_last_name} {user_date}")
    recording_data_of_users_who_launched_the_bot(user_id, user_name, user_first_name, user_last_name, user_date)

    user_exists = check_user_exists_in_db(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if user_exists:
        main_menu_key = create_greeting_keyboard()

        document = FSInputFile('media/photos/greeting.jpg')
        data = load_bot_info(messages="media/messages/main_menu_messages.json")
        await message.answer_photo(photo=document, caption=data,
                                   reply_markup=main_menu_key,
                                   parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        sign_up_text = ("‚ö†Ô∏è <b>–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ</b> ‚ö†Ô∏è\n\n"
                        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å</b>.\n\n"
                        "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é my_details() (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        my_details_key = create_my_details_keyboard()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await bot.send_message(message.from_user.id, sign_up_text,
                               reply_markup=my_details_key,
                               disable_web_page_preview=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_main_menu (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.message(Command("edit_main_menu"))
async def edit_main_menu(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ë–ª–∞–Ω–∫ –∑–∞–∫–∞–∑–∞"""
    if message.from_user.id not in ADMIN_USER_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É HTML.")
    await state.set_state(FormeditMainMenu.text_edit_main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
@router.message(FormeditMainMenu.text_edit_main_menu)
async def update_info(message: Message, state: FSMContext):
    text = message.html_text
    bot_info = text
    save_bot_info(bot_info, file_path='media/messages/main_menu_messages.json')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()


@router.callback_query(F.data == "main_menu")
async def send_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ–Ω –∂–µ –ø–æ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã"""
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –≤–µ—Ä–Ω—É–ª—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é")

        user_exists = check_user_exists_in_db(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if user_exists:
            greeting_keyboard = create_greeting_keyboard()
            document = FSInputFile('media/photos/greeting.jpg')
            data = load_bot_info(messages="media/messages/main_menu_messages.json")
            media = InputMediaPhoto(media=document, caption=data, parse_mode="HTML")
            await bot.edit_message_media(media=media,
                                         chat_id=callback_query.message.chat.id,
                                         message_id=callback_query.message.message_id,
                                         reply_markup=greeting_keyboard,
                                         )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            sign_up_text = ("‚ö†Ô∏è <b>–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ</b> ‚ö†Ô∏è\n\n"
                            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å</b>.\n\n"
                            "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é my_details() (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            my_details_key = create_my_details_keyboard()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await bot.send_message(callback_query.from_user.id, sign_up_text,
                                   reply_markup=my_details_key,
                                   disable_web_page_preview=True)
    except Exception as error:
        logger.exception(error)


@router.callback_query(F.data == "my_details")
async def call_us_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_data_from_db(user_id)  # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    if user_data:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–æ–±—Ä–∞–∑–∏—Ç–µ –∏—Ö
        name = user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        surname = user_data.get('surname', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        city = user_data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        phone_number = user_data.get('phone_number', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        registration_date = user_data.get('registration_date')

        text_mes = (f"ü§ù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name} {surname}!\n"
                    "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
                    f"‚úÖ <b>–ò–º—è:</b> {name}\n"
                    f"‚úÖ <b>–§–∞–º–∏–ª–∏—è:</b> {surname}\n"
                    f"‚úÖ <b>–ì–æ—Ä–æ–¥:</b> {city}\n"
                    f"‚úÖ <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {phone_number}\n"
                    f"‚úÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {registration_date}\n\n")
        edit_data_keyboard = create_data_modification_keyboard()
        await bot.send_message(callback_query.from_user.id, text_mes,
                               reply_markup=edit_data_keyboard,
                               )
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        keyboards_sign_up = create_sign_up_keyboard()
        sign_up_text = ("üëã –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–º —Å –í–∞–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n"
                        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–∏—Ö –§.–ò.–û., –≥–æ—Ä–æ–¥–µ –∏ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω—É–∂–Ω—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ "
                        "—Ä–∞–±–æ—Ç—ã –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –ø–æ–¥ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n"
                        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        await bot.send_message(callback_query.from_user.id, sign_up_text,
                               reply_markup=keyboards_sign_up,
                               disable_web_page_preview=True)


@router.callback_query(F.data == "edit_name")
async def edit_name_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(ChangingData.changing_name)


@router.message(ChangingData.changing_name)
async def process_entered_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_name = message.text
    if update_name_in_db(user_id, new_name):
        text_name = f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name} ‚úÖ\n\n" \
                    "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
        await bot.send_message(user_id, text_name)
    else:
        text_name = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ ‚ùå\n\n" \
                    "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
        await bot.send_message(user_id, text_name)
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
    await state.clear()


@router.callback_query(F.data == "edit_surname")
async def edit_surname_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(ChangingData.changing_surname)


@router.message(ChangingData.changing_surname)
async def process_entered_edit_surname(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_surname = message.text
    if update_surname_in_db(user_id, new_surname):
        text_surname = f"‚úÖ –§–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_surname} ‚úÖ\n\n" \
                       "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
        await bot.send_message(user_id, text_surname)
    else:
        text_surname = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–º–∏–ª–∏–∏ ‚ùå\n\n" \
                       "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
        await bot.send_message(user_id, text_surname)
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
    await state.clear()


@router.callback_query(F.data == "edit_city")
async def edit_city_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
    await state.set_state(ChangingData.changing_city)


@router.message(ChangingData.changing_city)
async def process_entered_edit_city(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_city = message.text
    if update_city_in_db(user_id, new_city):
        text_city = f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_city} ‚úÖ\n\n" \
                    "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
        await bot.send_message(user_id, text_city)
    else:
        text_city = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ ‚ùå\n\n" \
                    "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
        await bot.send_message(user_id, text_city)
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
    await state.clear()


@router.callback_query(F.data == "edit_phone")
async def edit_city_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(ChangingData.changing_phone)


@router.message(ChangingData.changing_phone)
async def process_entered_edit_city(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_phone = message.text
    if update_phone_in_db(user_id, new_phone):
        text_phone = f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_phone} ‚úÖ\n\n" \
                     "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
        await bot.send_message(user_id, text_phone)
    else:
        text_phone = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ùå\n\n" \
                     "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
        await bot.send_message(user_id, text_phone)
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
    await state.clear()


@router.callback_query(F.data == "agree")
async def agree_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(MakingAnOrder.write_surname)
    text_mes = ("üë• –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π):\n"
                "–ü—Ä–∏–º–µ—Ä: –ü–µ—Ç—Ä–æ–≤, –ò–≤–∞–Ω–æ–≤–∞, –°–∏–¥–æ—Ä–µ–Ω–∫–æ")
    await bot.send_message(callback_query.from_user.id, text_mes)


@router.message(MakingAnOrder.write_surname)
async def write_surname_handler(message: types.Message, state: FSMContext):
    surname = message.text
    await state.update_data(surname=surname)
    await state.set_state(MakingAnOrder.write_name)
    text_mes = ("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π):\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω, –û–ª—å–≥–∞, –ê–Ω–∞—Å—Ç–∞—Å–∏—è")
    await bot.send_message(message.from_user.id, text_mes)


@router.message(MakingAnOrder.write_name)
async def write_city_handlers(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await state.set_state(MakingAnOrder.write_city)
    text_mes = ("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π):\n"
                "–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
    await bot.send_message(message.from_user.id, text_mes)


@router.message(MakingAnOrder.write_city)
async def write_name_handler(message: types.Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)
    sign_up_texts = (
        "–î–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.\n\n"
        "–ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ.")
    contact_keyboard = create_contact_keyboard()
    await bot.send_message(message.from_user.id, sign_up_texts,
                           reply_markup=contact_keyboard,  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                           disable_web_page_preview=True)
    await state.set_state(MakingAnOrder.phone_input)


@router.message(StateFilter(MakingAnOrder.phone_input), F.contact)
async def handle_contact(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)
    await handle_confirmation(message, state)


@router.message(StateFilter(MakingAnOrder.phone_input), lambda message: message.text and not message.contact)
async def handle_phone_text(message: types.Message, state: FSMContext):
    phone_number = message.text
    await state.update_data(phone_number=phone_number)
    await handle_confirmation(message, state)


async def handle_confirmation(message: types.Message, state: FSMContext):
    markup = types.ReplyKeyboardRemove(selective=False)  # Remove the keyboard
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=markup)
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    surname = user_data.get('surname', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    name = user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    phone_number = user_data.get('phone_number', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    city = user_data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    registration_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram
    user_id = message.from_user.id
    # –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text_mes = (f"ü§ù –†–∞–¥—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {name} {surname}! ü§ù\n"
                "–í–∞—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                f"‚úÖ <b>–í–∞—à–µ –ò–º—è:</b> {name}\n"
                f"‚úÖ <b>–í–∞—à–∞ –§–∞–º–∏–ª–∏—è:</b> {surname}\n"
                f"‚úÖ <b>–í–∞—à –ì–æ—Ä–æ–¥:</b> {city}\n"
                f"‚úÖ <b>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {phone_number}\n"
                f"‚úÖ <b>–í–∞—à–∞ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {registration_date}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –º–µ–Ω—é \"–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ\".\n\n"
                "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
    insert_user_data_to_database(user_id, name, surname, city, phone_number, registration_date)
    await state.clear()
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é my_details() (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    await bot.send_message(message.from_user.id, text_mes)


def register_greeting_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.message.register(send_start)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ–Ω –∂–µ –ø–æ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
    dp.message.register(command_start_handler)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ–Ω –∂–µ –ø–æ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã

    dp.message.register(edit_main_menu)  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –±–æ—Ç–∞

    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ"""
    dp.message.register(greeting_photo)  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –±–æ—Ç–∞
