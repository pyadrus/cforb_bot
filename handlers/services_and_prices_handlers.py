from aiogram import types
from aiogram.dispatcher import FSMContext  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from loguru import logger

from keyboards.user_keyboards import services_and_prices_key
from system.dispatcher import bot, dp


@dp.callback_query_handler(lambda c: c.data == "services_and_prices")
async def services_and_prices(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.reset_state()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        from_user_name = callback_query.from_user.first_name  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        greeting_message = f"{from_user_name}, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏!\n\n"
        services_and_prices_keyboard = services_and_prices_key()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
        await bot.send_message(callback_query.from_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                               text=greeting_message,  # –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
                               reply_markup=services_and_prices_keyboard,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
                               parse_mode=types.ParseMode.HTML)  # –¢–µ–∫—Å—Ç –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
    except Exception as error:
        logger.exception(error)

@dp.callback_query_handler(lambda c: c.data == "cargo_delivery_prices")
async def order_form(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.reset_state()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # from_user_name = callback_query.from_user.first_name  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        greeting_message = f"–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è —Å–ª–µ–¥—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤. –ò –ø–æ–¥–ø–∏—Å—å: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –Ω–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫—É 20 –∫–≥.\n\n"
        # services_and_prices_keyboard = services_and_prices_key()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
        await bot.send_message(callback_query.from_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                               text=greeting_message,  # –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
                               # reply_markup=services_and_prices_keyboard,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
                               parse_mode=types.ParseMode.HTML)  # –¢–µ–∫—Å—Ç –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
    except Exception as error:
        logger.exception(error)

@dp.callback_query_handler(lambda c: c.data == "white_cargo_delivery_with_gas_turbine_engine")
async def order_form(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.reset_state()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # from_user_name = callback_query.from_user.first_name  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        greeting_message = (f"–ü–æ–º–æ–∂–µ–º –ø–µ—Ä–µ–≤–µ–∑—Ç–∏ –≥—Ä—É–∑ –∏ –ø—Ä–æ–π—Ç–∏ —Ç–∞–º–æ–∂–Ω—é –±–µ–∑ –ø–æ—Ç–µ—Ä—å –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–µ–Ω–µ–≥. –°–¥–µ–ª–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É: –ø–æ–¥–±–µ—Ä–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Å–æ–±–µ—Ä–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥–∞–¥–∏–º –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é, –æ—Ñ–æ—Ä–º–∏–º –∏ –ø—Ä–∏–≤–µ–∑–µ–º –≥—Ä—É–∑ –Ω–∞ —Å–∫–ª–∞–¥. –ò–ª–∏ –ø–æ–¥–∫–ª—é—á–∏–º—Å—è –Ω–∞ –Ω—É–∂–Ω–æ–º —ç—Ç–∞–ø–µ."
                            f"‚Ä¢ –ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"
                            f"‚Ä¢ –í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞"
                            f"‚Ä¢ –õ–æ–≥–∏—Å—Ç–∏–∫–∞"
                            f"‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
                            f"–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞—Å—á—ë—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –í–≠–î : –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!)\n\n")
        # services_and_prices_keyboard = services_and_prices_key()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
        await bot.send_message(callback_query.from_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                               text=greeting_message,  # –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
                               # reply_markup=services_and_prices_keyboard,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
                               parse_mode=types.ParseMode.HTML)  # –¢–µ–∫—Å—Ç –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
    except Exception as error:
        logger.exception(error)

def register_services_and_prices_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.register_message_handler(services_and_prices)
    dp.register_message_handler(order_form)
