import os
import zipfile

from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile, InputMediaPhoto
from aiogram.types import Message
from loguru import logger

from keyboards.user_keyboards.user_keyboards import create_services_and_prices_keyboard, \
    create_services_and_prices_main_menu_keyboard, get_price_lists_keyboard
from system.dispatcher import ADMIN_USER_ID
from system.dispatcher import bot, dp
from system.dispatcher import router
from system.working_with_files import load_bot_info
from system.working_with_files import save_bot_info


@router.message(Command("services_and_prices_photo"))
async def services_and_prices_photo(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ jpg")


@router.message(F.photo)
async def replace_photo(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo = message.photo[-1]
    file_info = await message.bot.get_file(photo.file_id)
    new_photo_path = os.path.join("media/photos/", 'services_and_prices.jpg')
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    await message.bot.download_file(file_info.file_path, new_photo_path)
    await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!")


@router.callback_query(F.data == "services_and_prices")
async def services_and_prices(callback_query: types.CallbackQuery, state: FSMContext):
    """–£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã"""
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        data = load_bot_info(messages="media/messages/services_and_prices.json")
        services_and_prices_keyboard = create_services_and_prices_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
        document = FSInputFile('media/photos/services_and_prices.jpg')
        media = InputMediaPhoto(media=document, caption=data)
        await bot.edit_message_media(media=media,
                                     chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id,
                                     reply_markup=services_and_prices_keyboard
                                     )
    except Exception as error:
        logger.exception(error)


class Formeedit_services_and_prices(StatesGroup):
    text_edit_services_and_prices = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_services_and_prices (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.message(Command("edit_services_and_prices"))
async def edit_services_and_prices(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã"""
    if message.from_user.id == ADMIN_USER_ID:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É HTML.")
        await state.set_state(Formeedit_services_and_prices.text_edit_services_and_prices)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
@router.message(Formeedit_services_and_prices.text_edit_services_and_prices)
async def update_info(message: Message, state: FSMContext):
    text = message.html_text
    bot_info = text
    save_bot_info(bot_info, file_path='media/messages/services_and_prices.json')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()


""""_____________________________________________________________________________________"""


def create_zip_archive(output_filename, source_dir):
    with zipfile.ZipFile(output_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(source_dir):
            for file in files:
                file_path = os.path.join(root, file)
                zipf.write(file_path, os.path.relpath(file_path, source_dir))
    return output_filename


@router.callback_query(F.data == "get_price_lists")
async def get_price_lists(callback_query: types.CallbackQuery, state: FSMContext):
    """üìå –ö–Ω–æ–ø–∫–∞ ‚Äú–ü—Ä–∞–π—Å—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ö–∞—Ä–≥–æ‚Äù"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    main_menu_keyboard = create_services_and_prices_main_menu_keyboard()

    price_zip = create_zip_archive('price.zip', 'media/photos/price')

    data = "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏: @cargo_cfbM."
    document = FSInputFile(price_zip)

    await bot.send_document(chat_id=callback_query.message.chat.id, document=document,
                            reply_markup=main_menu_keyboard,
                            caption=data)
    os.remove(price_zip)


class PhotoStates(StatesGroup):
    waiting_for_photo_1 = State()
    waiting_for_photo_2 = State()
    waiting_for_photo_3 = State()
    waiting_for_photo_4 = State()


@dp.message(Command("get_price_lists_photo_1"))
async def get_price_lists_photo_1(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ png")
    await state.set_state(PhotoStates.waiting_for_photo_1)


@dp.message(PhotoStates.waiting_for_photo_1, F.photo)
async def replace_photo_1(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    new_photo_path = os.path.join("media/photos/price", '1.png')
    await bot.download_file(file_info.file_path, new_photo_path)
    await message.answer("–ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ.")
    await state.set_state(PhotoStates.waiting_for_photo_2)


@dp.message(PhotoStates.waiting_for_photo_2, F.photo)
async def replace_photo_2(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    new_photo_path = os.path.join("media/photos/price", '2.png')
    await bot.download_file(file_info.file_path, new_photo_path)
    await message.answer("–í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ—Ç—å–µ —Ñ–æ—Ç–æ.")
    await state.set_state(PhotoStates.waiting_for_photo_3)


@dp.message(PhotoStates.waiting_for_photo_3, F.photo)
async def replace_photo_3(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    new_photo_path = os.path.join("media/photos/price", '3.png')
    await bot.download_file(file_info.file_path, new_photo_path)
    await message.answer("–¢—Ä–µ—Ç—å–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–µ —Ñ–æ—Ç–æ.")
    await state.set_state(PhotoStates.waiting_for_photo_4)


@dp.message(PhotoStates.waiting_for_photo_4, F.photo)
async def replace_photo_4(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    new_photo_path = os.path.join("media/photos/price", '4.png')
    await bot.download_file(file_info.file_path, new_photo_path)
    await message.answer("–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!")
    await state.clear()


""""_____________________________________________________________________________________"""


@router.callback_query(F.data == "cargo_delivery_prices")
async def cargo_delivery_prices(callback_query: types.CallbackQuery, state: FSMContext):
    """üìå –ö–Ω–æ–ø–∫–∞ ‚Äú–ü—Ä–∞–π—Å—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ö–∞—Ä–≥–æ‚Äù"""
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        data = load_bot_info(messages="media/messages/cargo_delivery_prices.json")
        main_menu_keyboard = get_price_lists_keyboard()
        await bot.edit_message_caption(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            caption=data,
            reply_markup=main_menu_keyboard
        )
    except Exception as error:
        logger.exception(error)


class Formedit_cargo_delivery_prices(StatesGroup):
    text_edit_cargo_delivery_prices = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_cargo_delivery_prices (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.message(Command("edit_cargo_delivery_prices"))
async def edit_cargo_delivery_prices(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü—Ä–∞–π—Å—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ö–∞—Ä–≥–æ"""
    if message.from_user.id == ADMIN_USER_ID:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É HTML.")
        await state.set_state(Formedit_cargo_delivery_prices.text_edit_cargo_delivery_prices)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
@router.message(Formedit_cargo_delivery_prices.text_edit_cargo_delivery_prices)
async def update_info(message: Message, state: FSMContext):
    text = message.html_text
    bot_info = text
    save_bot_info(bot_info, file_path='media/messages/cargo_delivery_prices.json')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()








""""_____________________________________________________________________________________"""


@router.callback_query(F.data == "goods_redemption_service")
async def goods_redemption_service(callback_query: types.CallbackQuery, state: FSMContext):
    """–£—Å–ª—É–≥–∞ –í—ã–∫—É–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = load_bot_info(messages="media/messages/goods_redemption_service.json")
    main_menu_keyboard = create_services_and_prices_main_menu_keyboard()
    await bot.edit_message_caption(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        caption=data,
        reply_markup=main_menu_keyboard
    )


class Formedit_goods_redemption_service(StatesGroup):
    text_edit_goods_redemption_service = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_goods_redemption_service (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.message(Command("edit_goods_redemption_service"))
async def edit_goods_redemption_service(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –£—Å–ª—É–≥–∞ –í—ã–∫—É–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    if message.from_user.id == ADMIN_USER_ID:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É HTML.")
        await state.set_state(Formedit_goods_redemption_service.text_edit_goods_redemption_service)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
@router.message(Formedit_goods_redemption_service.text_edit_goods_redemption_service)
async def update_info(message: Message, state: FSMContext):
    text = message.html_text
    bot_info = text
    save_bot_info(bot_info, file_path='media/messages/goods_redemption_service.json')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()


""""_____________________________________________________________________________________"""


@router.callback_query(F.data == "product_search_service")
async def product_search_service(callback_query: types.CallbackQuery, state: FSMContext):
    """üìå –ö–Ω–æ–ø–∫–∞ ‚Äú–£—Å–ª—É–≥–∞ –ü–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –ö–∏—Ç–∞–µ)‚Äù"""
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        data = load_bot_info(messages="media/messages/product_search_service.json")
        main_menu_keyboard = create_services_and_prices_main_menu_keyboard()
        await bot.edit_message_caption(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            caption=data,
            reply_markup=main_menu_keyboard
        )
    except Exception as error:
        logger.exception(error)


class Formedit_product_search_service(StatesGroup):
    text_edit_product_search_service = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_product_search_service (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.message(Command("edit_product_search_service"))
async def edit_product_search_service(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –£—Å–ª—É–≥–∞ –ü–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –ö–∏—Ç–∞–µ)"""
    if message.from_user.id == ADMIN_USER_ID:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É HTML.")
        await state.set_state(Formedit_product_search_service.text_edit_product_search_service)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
@router.message(Formedit_product_search_service.text_edit_product_search_service)
async def update_info(message: Message, state: FSMContext):
    text = message.html_text
    bot_info = text
    save_bot_info(bot_info, file_path='media/messages/product_search_service.json')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()


""""_____________________________________________________________________________________"""





""""_____________________________________________________________________________________"""


@router.callback_query(F.data == "wechat_registration_service")
async def wechat_registration_service(callback_query: types.CallbackQuery, state: FSMContext):
    """–£—Å–ª—É–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ WeChat"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = load_bot_info(messages="media/messages/wechat_registration_service.json")
    main_menu_keyboard = create_services_and_prices_main_menu_keyboard()
    await bot.edit_message_caption(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        caption=data,
        reply_markup=main_menu_keyboard
    )


class Formedit_wechat_registration_service(StatesGroup):
    text_edit_wechat_registration_service = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_wechat_registration_service (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.message(Command("edit_wechat_registration_service"))
async def edit_wechat_registration_service(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –£—Å–ª—É–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ WeChat"""
    if message.from_user.id == ADMIN_USER_ID:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É HTML.")
        await state.set_state(Formedit_wechat_registration_service.text_edit_wechat_registration_service)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
@router.message(Formedit_wechat_registration_service.text_edit_wechat_registration_service)
async def update_info(message: Message, state: FSMContext):
    text = message.html_text
    bot_info = text
    save_bot_info(bot_info, file_path='media/messages/wechat_registration_service.json')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()


""""_____________________________________________________________________________________"""


@router.callback_query(F.data == "purchase_a_supplier_database")
async def purchase_a_supplier_database(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = load_bot_info(messages="media/messages/purchase_a_supplier_database.json")
    main_menu_keyboard = create_services_and_prices_main_menu_keyboard()
    await bot.edit_message_caption(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        caption=data,
        reply_markup=main_menu_keyboard
    )


class Formedit_purchase_a_supplier_database(StatesGroup):
    text_edit_purchase_a_supplier_database = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_purchase_a_supplier_database (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.message(Command("edit_purchase_a_supplier_database"))
async def edit_purchase_a_supplier_database(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    if message.from_user.id == ADMIN_USER_ID:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É HTML.")
        await state.set_state(Formedit_purchase_a_supplier_database.text_edit_purchase_a_supplier_database)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
@router.message(Formedit_purchase_a_supplier_database.text_edit_purchase_a_supplier_database)
async def update_info(message: Message, state: FSMContext):
    text = message.html_text
    bot_info = text
    save_bot_info(bot_info, file_path='media/messages/purchase_a_supplier_database.json')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()


""""_____________________________________________________________________________________"""


@router.callback_query(F.data == "what_payments_await_me")
async def what_payments_await_me(callback_query: types.CallbackQuery, state: FSMContext):
    """üìå –ö–Ω–æ–ø–∫–∞ ‚Äú–ö–∞–∫–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –º–µ–Ω—è –æ–∂–∏–¥–∞—é—Ç?‚Äù"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = load_bot_info(messages="media/messages/what_payments_await_me.json")
    main_menu_keyboard = create_services_and_prices_main_menu_keyboard()
    await bot.edit_message_caption(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        caption=data,
        reply_markup=main_menu_keyboard
    )


class Formedit_what_payments_await_me(StatesGroup):
    text_edit_what_payments_await_me = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_what_payments_await_me (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.message(Command("edit_what_payments_await_me"))
async def edit_what_payments_await_me(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ö–∞–∫–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –º–µ–Ω—è –æ–∂–∏–¥–∞—é—Ç?"""
    if message.from_user.id == ADMIN_USER_ID:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É HTML.")
        await state.set_state(Formedit_what_payments_await_me.text_edit_what_payments_await_me)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
@router.message(Formedit_what_payments_await_me.text_edit_what_payments_await_me)
async def update_info(message: Message, state: FSMContext):
    text = message.html_text
    bot_info = text
    save_bot_info(bot_info, file_path='media/messages/what_payments_await_me.json')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()


""""_____________________________________________________________________________________"""

def register_services_and_prices_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.message.register(services_and_prices)
    dp.message.register(cargo_delivery_prices)

    dp.message.register(goods_redemption_service)
    dp.message.register(product_search_service)
    dp.message.register(supplier_inspection_by_province)
    dp.message.register(wechat_registration_service)
    dp.message.register(purchase_a_supplier_database)
    dp.message.register(what_payments_await_me)
    dp.message.register(get_price_lists)

    dp.message.register(edit_what_payments_await_me)  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ö–∞–∫–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –º–µ–Ω—è –æ–∂–∏–¥–∞—é—Ç?
    dp.message.register(edit_purchase_a_supplier_database)  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    dp.message.register(edit_wechat_registration_service)  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –£—Å–ª—É–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ WeChat
    dp.message.register(
        edit_supplier_inspection_by_province)  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ò–Ω—Å–ø–µ–∫—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è–º (–≤—ã–µ–∑–¥ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)
    dp.message.register(edit_product_search_service)  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –£—Å–ª—É–≥–∞ –ü–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –ö–∏—Ç–∞–µ)
    dp.message.register(edit_goods_redemption_service)  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –£—Å–ª—É–≥–∞ –í—ã–∫—É–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤

    dp.message.register(edit_cargo_delivery_prices)  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü—Ä–∞–π—Å—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ö–∞—Ä–≥–æ
    dp.message.register(edit_services_and_prices)  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã

    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ"""
    dp.message.register(services_and_prices_photo)
    dp.message.register(get_price_lists_photo_1)
